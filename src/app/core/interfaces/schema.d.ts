/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/announcement/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_announcement_list"];
        put?: never;
        post: operations["api_announcement_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/announcement/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_announcement_retrieve"];
        put: operations["api_announcement_update"];
        post?: never;
        delete: operations["api_announcement_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_announcement_partial_update"];
        trace?: never;
    };
    "/api/bus/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_bus_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/buses/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_buses_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comment/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_comment_list"];
        put?: never;
        post: operations["api_comment_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comment/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_comment_retrieve"];
        put: operations["api_comment_update"];
        post?: never;
        delete: operations["api_comment_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_comment_partial_update"];
        trace?: never;
    };
    "/api/images/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_images_list"];
        put?: never;
        post: operations["api_images_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/images/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_images_retrieve"];
        put: operations["api_images_update"];
        post?: never;
        delete: operations["api_images_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_images_partial_update"];
        trace?: never;
    };
    "/api/lessee-types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_lessee_types_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/like/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_like_list"];
        put?: never;
        post: operations["api_like_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/like/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_like_retrieve"];
        put: operations["api_like_update"];
        post?: never;
        delete: operations["api_like_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_like_partial_update"];
        trace?: never;
    };
    "/api/my-announcement/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_my_announcement_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
         *
         *     - YAML: application/vnd.oai.openapi
         *     - JSON: application/vnd.oai.openapi+json */
        get: operations["api_schema_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a set of user credentials and returns an access and refresh JSON web
         *     token pair to prove the authentication of those credentials. */
        post: operations["api_token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["api_token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transport/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_transport_list"];
        put?: never;
        post: operations["api_transport_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transport/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_transport_retrieve"];
        put: operations["api_transport_update"];
        post?: never;
        delete: operations["api_transport_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_transport_partial_update"];
        trace?: never;
    };
    "/api/user-rooms/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_user_rooms_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-rooms/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_user_rooms_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_retrieve"];
        put: operations["api_users_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_users_partial_update"];
        trace?: never;
    };
    "/api/users/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/register/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/verification/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["verification_code_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/verification/number": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["verification_number_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Announcement: {
            readonly id: number;
            readonly transports: components["schemas"]["Transport"][];
            readonly images: components["schemas"]["Image"][];
            readonly lessee_types: components["schemas"]["LesseeTypes"][];
            title: string;
            partnership?: boolean;
            need_people_count?: number;
            room_count?: number;
            address?: string | null;
            location_x?: string | null;
            location_y?: string | null;
            currency?: components["schemas"]["CurrencyEnum"];
            /** Format: double */
            total_price?: number | null;
            /** Format: double */
            price_for_one?: number | null;
            appartment_status: number;
            description?: string | null;
            conditioner?: boolean;
            washing_machine?: boolean;
            fridge?: boolean;
            floor?: boolean;
            user: number;
        };
        ChatRoom: {
            readonly id: number;
            name: string;
            /** Format: date-time */
            readonly created_at: string;
            readonly users: components["schemas"]["UserForChat"][];
            readonly messages: string;
        };
        ChatRoomDetail: {
            readonly id: number;
            name: string;
            /** Format: date-time */
            readonly created_at: string;
            readonly users: components["schemas"]["UserForChat"][];
            readonly messages: components["schemas"]["MessageSend"][];
        };
        Comment: {
            readonly id: number;
            readonly user: components["schemas"]["UserMe"];
            /** Format: date-time */
            created?: string;
            comment?: string | null;
            announcement: number;
        };
        /**
         * @description * `USD` - US Dollar
         *     * `EUR` - Euro
         *     * `UZS` - So`m
         * @enum {string}
         */
        CurrencyEnum: "USD" | "EUR" | "UZS";
        Image: {
            readonly id: number;
            name?: string | null;
            /** Format: uuid */
            uuid?: string;
            /** Format: uri */
            image: string;
        };
        LesseeTypes: {
            name: string;
            description?: string | null;
            readonly id: number;
        };
        Like: {
            readonly id: number;
            readonly announcement: components["schemas"]["Announcement"];
            /** Format: date-time */
            created?: string;
            user: number;
        };
        MessageSend: {
            readonly id: number;
            sender: number;
            receiver: number;
            /** Format: date-time */
            readonly created_at: string;
            room: number;
            is_read?: boolean;
            message: string;
        };
        PaginatedAnnouncementList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Announcement"][];
        };
        PaginatedLesseeTypesList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["LesseeTypes"][];
        };
        PatchedAnnouncement: {
            readonly id?: number;
            readonly transports?: components["schemas"]["Transport"][];
            readonly images?: components["schemas"]["Image"][];
            readonly lessee_types?: components["schemas"]["LesseeTypes"][];
            title?: string;
            partnership?: boolean;
            need_people_count?: number;
            room_count?: number;
            address?: string | null;
            location_x?: string | null;
            location_y?: string | null;
            currency?: components["schemas"]["CurrencyEnum"];
            /** Format: double */
            total_price?: number | null;
            /** Format: double */
            price_for_one?: number | null;
            appartment_status?: number;
            description?: string | null;
            conditioner?: boolean;
            washing_machine?: boolean;
            fridge?: boolean;
            user?: number;
        };
        PatchedComment: {
            readonly id?: number;
            readonly user?: components["schemas"]["UserMe"];
            /** Format: date-time */
            created?: string;
            comment?: string | null;
            announcement?: number;
        };
        PatchedImage: {
            readonly id?: number;
            name?: string | null;
            /** Format: uuid */
            uuid?: string;
            /** Format: uri */
            image?: string;
        };
        PatchedLike: {
            readonly id?: number;
            readonly announcement?: components["schemas"]["Announcement"];
            /** Format: date-time */
            created?: string;
            user?: number;
        };
        PatchedTransport: {
            name?: string;
            type?: components["schemas"]["TypeEnum"];
            readonly id?: number;
            ri?: string | null;
        };
        PatchedUser: {
            /** Name of User */
            name?: string;
            /** Format: uri */
            readonly url?: string;
        };
        TokenObtainPair: {
            phone_number: string;
            password: string;
            readonly access: string;
            readonly refresh: string;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        Transport: {
            name: string;
            type: components["schemas"]["TypeEnum"];
            readonly id: number;
            ri?: string | null;
        };
        /**
         * @description * `BUS` - Avtobus
         *     * `METRO` - Metro
         *     * `MARSHUTKA` - Marshutka
         * @enum {string}
         */
        TypeEnum: "BUS" | "METRO" | "MARSHUTKA";
        User: {
            /** Name of User */
            name?: string;
            /** Format: uri */
            readonly url: string;
        };
        UserCreate: {
            /** Name of User */
            name?: string;
            phone_number: string;
            password: string;
        };
        UserForChat: {
            readonly id: number;
            /** Name of User */
            name?: string;
            phone_number: string;
            readonly images: components["schemas"]["Image"][];
            is_online?: boolean;
        };
        UserLogin: {
            phone_number: string;
            password: string;
        };
        UserMe: {
            readonly id: number;
            /** Name of User */
            name?: string;
            /** First name of User */
            first_name?: string | null;
            /** Last name of User */
            last_name?: string | null;
            /**
             * Email address
             * Format: email
             */
            email?: string | null;
            phone_number: string;
            readonly images: components["schemas"]["Image"][];
        };
        UserUpdate: {
            /** Name of User */
            name?: string;
            /** First name of User */
            first_name?: string | null;
            /** Last name of User */
            last_name?: string | null;
            /**
             * Email address
             * Format: email
             */
            email?: string | null;
        };
        VerificationCode: {
            phone_number: string;
            code: string;
        };
        VerificationPhone: {
            phone_number: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_announcement_list: {
        parameters: {
            query?: {
                appartment_status__gte?: number;
                appartment_status__lte?: number;
                conditioner?: boolean;
                fridge?: boolean;
                lessee_types?: number[];
                need_people_count?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                partnership?: boolean;
                price_for_one__gte?: number;
                price_for_one__lte?: number;
                room_count?: number;
                /** @description A search term. */
                search?: string;
                total_price__gte?: number;
                total_price__lte?: number;
                washing_machine?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAnnouncementList"];
                };
            };
        };
    };
    api_announcement_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Announcement"];
                "application/x-www-form-urlencoded": components["schemas"]["Announcement"];
                "multipart/form-data": components["schemas"]["Announcement"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Announcement"];
                };
            };
        };
    };
    api_announcement_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this announcement. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Announcement"];
                };
            };
        };
    };
    api_announcement_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this announcement. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Announcement"];
                "application/x-www-form-urlencoded": components["schemas"]["Announcement"];
                "multipart/form-data": components["schemas"]["Announcement"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Announcement"];
                };
            };
        };
    };
    api_announcement_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this announcement. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_announcement_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this announcement. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAnnouncement"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAnnouncement"];
                "multipart/form-data": components["schemas"]["PatchedAnnouncement"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Announcement"];
                };
            };
        };
    };
    api_bus_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_buses_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_comment_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"][];
                };
            };
        };
    };
    api_comment_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comment"];
                "application/x-www-form-urlencoded": components["schemas"]["Comment"];
                "multipart/form-data": components["schemas"]["Comment"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    api_comment_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this comment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    api_comment_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this comment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comment"];
                "application/x-www-form-urlencoded": components["schemas"]["Comment"];
                "multipart/form-data": components["schemas"]["Comment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    api_comment_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this comment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_comment_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this comment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedComment"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedComment"];
                "multipart/form-data": components["schemas"]["PatchedComment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    api_images_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Image"][];
                };
            };
        };
    };
    api_images_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Image"];
                "application/x-www-form-urlencoded": components["schemas"]["Image"];
                "multipart/form-data": components["schemas"]["Image"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Image"];
                };
            };
        };
    };
    api_images_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this images. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Image"];
                };
            };
        };
    };
    api_images_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this images. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Image"];
                "application/x-www-form-urlencoded": components["schemas"]["Image"];
                "multipart/form-data": components["schemas"]["Image"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Image"];
                };
            };
        };
    };
    api_images_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this images. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_images_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this images. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedImage"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedImage"];
                "multipart/form-data": components["schemas"]["PatchedImage"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Image"];
                };
            };
        };
    };
    api_lessee_types_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLesseeTypesList"];
                };
            };
        };
    };
    api_like_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Like"][];
                };
            };
        };
    };
    api_like_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Like"];
                "application/x-www-form-urlencoded": components["schemas"]["Like"];
                "multipart/form-data": components["schemas"]["Like"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Like"];
                };
            };
        };
    };
    api_like_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this like. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Like"];
                };
            };
        };
    };
    api_like_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this like. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Like"];
                "application/x-www-form-urlencoded": components["schemas"]["Like"];
                "multipart/form-data": components["schemas"]["Like"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Like"];
                };
            };
        };
    };
    api_like_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this like. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_like_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this like. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedLike"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedLike"];
                "multipart/form-data": components["schemas"]["PatchedLike"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Like"];
                };
            };
        };
    };
    api_my_announcement_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAnnouncementList"];
                };
            };
        };
    };
    api_schema_retrieve: {
        parameters: {
            query?: {
                format?: "json" | "yaml";
                lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "ug" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.oai.openapi": {
                        [key: string]: unknown;
                    };
                    "application/yaml": {
                        [key: string]: unknown;
                    };
                    "application/vnd.oai.openapi+json": {
                        [key: string]: unknown;
                    };
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    api_token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenObtainPair"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPair"];
                "multipart/form-data": components["schemas"]["TokenObtainPair"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenObtainPair"];
                };
            };
        };
    };
    api_token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefresh"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
                "multipart/form-data": components["schemas"]["TokenRefresh"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    api_transport_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transport"][];
                };
            };
        };
    };
    api_transport_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Transport"];
                "application/x-www-form-urlencoded": components["schemas"]["Transport"];
                "multipart/form-data": components["schemas"]["Transport"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transport"];
                };
            };
        };
    };
    api_transport_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this transports. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transport"];
                };
            };
        };
    };
    api_transport_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this transports. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Transport"];
                "application/x-www-form-urlencoded": components["schemas"]["Transport"];
                "multipart/form-data": components["schemas"]["Transport"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transport"];
                };
            };
        };
    };
    api_transport_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this transports. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_transport_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this transports. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTransport"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTransport"];
                "multipart/form-data": components["schemas"]["PatchedTransport"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transport"];
                };
            };
        };
    };
    api_user_rooms_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatRoom"][];
                };
            };
        };
    };
    api_user_rooms_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this chat room. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatRoomDetail"];
                };
            };
        };
    };
    api_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["UserUpdate"];
                "multipart/form-data": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserUpdate"];
                };
            };
        };
    };
    api_users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUser"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUser"];
                "multipart/form-data": components["schemas"]["PatchedUser"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLogin"];
                "application/x-www-form-urlencoded": components["schemas"]["UserLogin"];
                "multipart/form-data": components["schemas"]["UserLogin"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLogin"];
                };
            };
        };
    };
    register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["UserCreate"];
                "multipart/form-data": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserCreate"];
                };
            };
        };
    };
    verification_code_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerificationCode"];
                "application/x-www-form-urlencoded": components["schemas"]["VerificationCode"];
                "multipart/form-data": components["schemas"]["VerificationCode"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerificationCode"];
                };
            };
        };
    };
    verification_number_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerificationPhone"];
                "application/x-www-form-urlencoded": components["schemas"]["VerificationPhone"];
                "multipart/form-data": components["schemas"]["VerificationPhone"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerificationPhone"];
                };
            };
        };
    };
}
